From 2a0fdeefc4ed485fc3480e9426c32bf8f3b50c49 Mon Sep 17 00:00:00 2001
From: Martin Barksten <martin.barksten@gmail.com>
Date: Thu, 13 Sep 2018 15:11:46 +0200
Subject: [PATCH] pass

---
 pytt/pytt.py | 72 +++++-------------------------------------------------------
 1 file changed, 6 insertions(+), 66 deletions(-)

diff --git a/pytt/pytt.py b/pytt/pytt.py
index 5d665bf..f5d5bd6 100755
--- a/pytt/pytt.py
+++ b/pytt/pytt.py
@@ -61,37 +61,7 @@ def cat_file(obj):
     This implementation assumes the -p flag is passed, i.e. it always pretty
     prints the object.
     """
-    with open(_object_path(obj), 'rb') as f:
-        content = zlib.decompress(f.read())
-
-    [header, data] = content.split(b'\0', 1)
-
-    if header.startswith(b'blob'):
-        try:
-            print(data.decode())
-        except UnicodeDecodeError:
-            log.debug('Unable to decode, printing as is')
-            print(data)
-    elif header.startswith(b'tree'):
-        tree_object = Tree.from_string(data)
-        for entry in tree_object.entries:
-            mode = entry.mode.decode()
-            if mode == '40000':
-                mode = '0' + mode
-                object_type = 'tree'
-            else:
-                object_type = 'blob'
-
-            print('%s %s %s\t%s' % (
-                mode, object_type, entry.sha1, entry.name.decode()))
-    elif header.startswith(b'commit'):
-        commit_object = Commit.from_string(data)
-        print('tree %s' % commit_object.tree.decode())
-        for parent in commit_object.parents:
-            print('parent %s' % parent.decode())
-        print('author %s' % commit_object.author)
-        print('committer %s' % commit_object.committer)
-        print('\n%s' % commit_object.message.decode())
+    pass
 
 
 def hash_object(data, write=False, object_type='blob'):
@@ -119,54 +89,24 @@ def hash_object(data, write=False, object_type='blob'):
 
 def ls_files():
     """List all files in the index."""
-    idx = _index()
-    for _, entry in idx.entries.items():
-        # why the -1? Well the mode type is 1000, 1010 or 1100 and
-        # permissions 0755 or 0644 so git decides to cut a 0 when
-        # concatenating them.
-        mode = '%s%s' % (bin(entry.mode_type)[
-                         2:-1], oct(entry.mode_permissions)[2:])
-        print('%s %s %s\t%s' % (
-            mode, entry.sha1, entry.stage_flag, entry.name))
+    pass
 
 
 def update_index(mode, sha, filename):
     """Add the object (blob or tree) to the index with the mode and name."""
-    idx = _index()
-
-    idx.append(Index.Entry(new=True,
-                           mode=mode,
-                           sha=_resolve_object_sha(sha),
-                           filename=filename))
-
-    packed = idx.pack()
-    with open(_git_path('index'), 'wb') as f:
-        f.write(packed)
+    pass
 
 
 def write_tree():
     """Write the index to a git tree."""
-    idx = _index()
-
-    tree_entries = []
-    for _, entry in idx.entries.items():
-        tree_entries.append(Tree.Entry(mode_type=entry.mode_type,
-                                       mode_permissions=entry.mode_permissions, sha=entry.sha1, name=entry.name))
-
-    tree_object = Tree(tree_entries)
-    hash_object(tree_object.pack(), write=True, object_type='tree')
+    pass
 
 
 def commit_tree(tree, message, parent=None):
     """Create a commit for the tree."""
-    tree = _resolve_object_sha(tree)
-    parent = _resolve_object_sha(parent)
-    c = Commit.create(tree, message, parent)
-    hash_object(c.pack(), write=True, object_type='commit')
+    pass
 
 
 def update_ref(ref, sha):
     """Update the ref to the given sha."""
-    sha = _resolve_object_sha(sha)
-    with open(_git_path(ref), 'w') as f:
-        f.write(sha)
+    pass
-- 
2.15.2 (Apple Git-101.1)

