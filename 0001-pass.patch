From 98dc23fce66e4379837cff7b6e3da2a31bfd0dc2 Mon Sep 17 00:00:00 2001
From: Martin Barksten <martin.barksten@gmail.com>
Date: Wed, 26 Sep 2018 12:47:16 +0200
Subject: [PATCH] tmp

---
 pytt/pytt.py | 50 ++++++--------------------------------------------
 1 file changed, 6 insertions(+), 44 deletions(-)

diff --git a/pytt/pytt.py b/pytt/pytt.py
index b133a54..66a4508 100755
--- a/pytt/pytt.py
+++ b/pytt/pytt.py
@@ -97,69 +97,31 @@ def hash_object(data: bytes, write: bool = False, object_type: str = "blob") ->
     write -- if true also saves the object to the corresponding file.
     object_type -- blob, tree or commit 
     """
-    header = "%s %d" % (object_type, len(data))
-    content = b"%s\0%s" % (header.encode(), data)
-
-    sha = hashlib.sha1(content)
-    print(sha.hexdigest())
-
-    if write:
-        path = _object_path(sha.hexdigest(), resolve=False)
-        _ensure_directory(path)
-
-        with open(path, "wb") as f:
-            f.write(zlib.compress(content))
+    pass
 
 
 def ls_files() -> None:
     """List all files in the index."""
-    idx = _index()
-    for _, entry in idx.entries.items():
-        print(entry)
+    pass
 
 
 def update_index(mode: str, sha: str, filename: str) -> None:
     """Add the object (blob or tree) to the index with the mode and name."""
-    idx = _index()
-
-    idx.append(Index.Entry.create_new(
-        mode, _resolve_object_sha(sha), filename))
-
-    with open(_git_path("index"), "wb") as f:
-        f.write(idx.pack())
+    pass
 
 
 def write_tree() -> None:
     """Read the current index and create a new Tree object.
 
     For all entries in the index convert them to a tree entry and store in the new tree."""
-    idx = _index()
-
-    tree_entries = []
-    for _, entry in idx.entries.items():
-        tree_entries.append(
-            Tree.Entry(
-                mode_type=entry.mode_type,
-                mode_permissions=entry.mode_permissions,
-                sha=entry.sha,
-                name=entry.name,
-            )
-        )
-
-    tree_object = Tree(tree_entries)
-    hash_object(tree_object.pack(), write=True, object_type="tree")
+    pass
 
 
 def commit_tree(tree: str, message: str, parent: str = None) -> None:
     """With the given tree, message and optionally parent create a new commit object and save it."""
-    tree = _resolve_object_sha(tree)
-    parent = _resolve_object_sha(parent)
-    c = Commit.create(tree, message, parent)
-    hash_object(c.pack(), write=True, object_type="commit")
+    pass
 
 
 def update_ref(ref: str, sha: str) -> None:
     """Update the ref to the given sha."""
-    sha = _resolve_object_sha(sha)
-    with open(_git_path(ref), "w") as f:
-        f.write(sha)
+    pass
-- 
2.15.2 (Apple Git-101.1)

